{"version":3,"sources":["scripts/main.js"],"names":["score","best","rows","columns","board","Array","from","length","fill","start","document","getElementById","restart","reStart","style","display","setStart","elements","getElementsByClassName","addEventListener","handleKeyUp","parentNode","removeChild","classList","add","setGame","columnId","rowID","number","Math","floor","random","includes","push","forEach","numberColumn","numberRow","probabilityOne","probabilityTwo","r","c","tile","createElement","id","toString","updateTile","append","innerText","isGameOver","i","j","hasEmptyTile","hasZero","row","cell","setTwo","found","probability","num","value","remove","e","code","slideLeft","slideRight","slideUp","slideDown","Error","filterZero","filter","slide","rowSecond","reverse","window","onload"],"mappings":"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","file":"main.b6f2fc9d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nlet score = 0;\r\nlet best = 0;\r\nconst rows = 4;\r\nconst columns = 4;\r\nlet board = Array.from({ length: rows }, () => new Array(columns).fill(0));\r\nconst start = document.getElementById('startbutton');\r\nconst restart = document.getElementById('restartbutton');\r\n\r\nwindow.onload = function() {\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < columns; c++) {\r\n      const tile = document.createElement('div');\r\n\r\n      tile.id = r.toString() + '-' + c.toString();\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n      document.getElementById('board').append(tile);\r\n    }\r\n  }\r\n\r\n  restart.style.display = 'none';\r\n};\r\n\r\nstart.addEventListener('click', setStart);\r\nrestart.addEventListener('click', reStart);\r\n\r\nfunction reStart() {\r\n  restart.style.display = 'none';\r\n\r\n  setStart();\r\n\r\n  document.getElementById('startbutton').style.display = 'flex';\r\n  document.getElementById('restartbutton').style.display = 'none';\r\n}\r\n\r\nfunction setStart() {\r\n  const elements = document.getElementsByClassName('tile');\r\n\r\n  document.addEventListener('keyup', handleKeyUp);\r\n\r\n  while (elements.length > 0) {\r\n    elements[0].parentNode.removeChild(elements[0]);\r\n  }\r\n\r\n  board = Array.from({ length: rows }, () => new Array(columns).fill(0));\r\n\r\n  document.getElementById('loser').classList.add('hidden');\r\n  document.getElementById('winner').classList.add('hidden');\r\n  document.getElementById('start').classList.add('hidden');\r\n  document.getElementById('startbutton').style.display = 'none';\r\n  document.getElementById('restartbutton').style.display = 'flex';\r\n\r\n  setGame();\r\n}\r\n\r\nfunction setGame() {\r\n  const columnId = [];\r\n  const rowID = [];\r\n\r\n  while (columnId.length < 1) {\r\n    const number = Math.floor(Math.random() * 4);\r\n\r\n    if (!columnId.includes(number) && !rowID.includes(number)) {\r\n      columnId.push(number);\r\n    }\r\n  }\r\n\r\n  while (rowID.length < 1) {\r\n    const number = Math.floor(Math.random() * 4);\r\n\r\n    if (!columnId.includes(number) && !rowID.includes(number)) {\r\n      rowID.push(number);\r\n    }\r\n  }\r\n\r\n  columnId.forEach((numberColumn) => {\r\n    rowID.forEach((numberRow) => {\r\n      const probabilityOne = Math.floor(Math.random() * 10);\r\n      const probabilityTwo = Math.floor(Math.random() * 10);\n\r\n      board[numberColumn][numberRow] = probabilityOne === 1 ? 4 : 2;\r\n      board[numberRow][numberColumn] = probabilityTwo === 1 ? 4 : 2;\r\n    });\r\n  });\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < columns; c++) {\r\n      const tile = document.createElement('div');\r\n\r\n      tile.id = r.toString() + '-' + c.toString();\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n      document.getElementById('board').append(tile);\r\n    }\r\n  }\r\n\r\n  score = 0;\r\n  document.getElementById('score').innerText = score;\r\n}\r\n\r\nfunction isGameOver() {\r\n  for (let i = 0; i < 4; i++) {\r\n    for (let j = 0; j < 4; j++) {\r\n      if (board[i][j] === 0) {\r\n        return false;\r\n      }\r\n\r\n      if (i > 0 && board[i][j] === board[i - 1][j]) {\r\n        return false;\r\n      }\r\n\r\n      if (j > 0 && board[i][j] === board[i][j - 1]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction hasEmptyTile() {\r\n  let hasZero = false;\r\n\r\n  board.forEach(row => {\r\n    row.forEach(cell => {\r\n      if (cell === 0) {\r\n        hasZero = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  return hasZero;\r\n}\r\n\r\nfunction setTwo() {\r\n  if (!hasEmptyTile()) {\r\n    return;\r\n  }\r\n\r\n  let found = false;\r\n\r\n  while (!found) {\r\n    const r = Math.floor(Math.random() * rows);\r\n    const c = Math.floor(Math.random() * columns);\r\n\r\n    if (board[r][c] === 0) {\r\n      const probability = Math.floor(Math.random() * 10);\n\r\n      board[r][c] = probability === 1 ? 4 : 2;\r\n\r\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\r\n\r\n      tile.innerText = probability === 1 ? '4' : '2';\r\n\r\n      tile.classList.add('x2');\r\n\r\n      found = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateTile(tile, num) {\r\n  tile.innerText = '';\r\n  tile.classList.value = '';\r\n  tile.classList.add('tile');\r\n\r\n  if (num > 0) {\r\n    tile.innerText = num;\r\n\r\n    if (num <= 4096) {\r\n      tile.classList.add('x' + num.toString());\r\n    } else {\r\n      tile.classList.add('x8192');\r\n    }\r\n  }\r\n\r\n  if (num === 2048) {\r\n    document.getElementById('winner').classList.remove('hidden');\r\n    document.getElementById('start').classList.add('hidden');\r\n    document.getElementById('loser').classList.add('hidden');\r\n    document.getElementById('startbutton').style.display = 'flex';\r\n    document.getElementById('restartbutton').style.display = 'none';\r\n  }\r\n}\r\n\r\nfunction handleKeyUp(e) {\r\n  if (e.code === 'ArrowLeft') {\r\n    slideLeft();\r\n    setTwo();\r\n  } else if (e.code === 'ArrowRight') {\r\n    slideRight();\r\n    setTwo();\r\n  } else if (e.code === 'ArrowUp') {\r\n    slideUp();\r\n    setTwo();\r\n  } else if (e.code === 'ArrowDown') {\r\n    slideDown();\r\n    setTwo();\r\n  }\r\n\r\n  if (isGameOver()) {\r\n    document.getElementById('loser').classList.add('hidden');\r\n    document.getElementById('winner').classList.add('hidden');\r\n    document.getElementById('start').classList.remove('hidden');\r\n    throw new Error('Something went wrong.');\r\n  }\r\n\r\n  document.getElementById('score').innerText = score;\r\n  document.getElementById('best').innerText = best;\r\n}\r\n\r\nfunction filterZero(row) {\r\n  return row.filter((number) => {\r\n    return number !== 0;\r\n  });\r\n}\r\n\r\nfunction slide(row) {\r\n  document.getElementById('restartbutton').style.display = 'flex';\r\n  document.getElementById('startbutton').style.display = 'none';\r\n\r\n  let rowSecond = filterZero(row);\r\n\r\n  rowSecond.forEach((value, i) => {\r\n    if (i < rowSecond.length - 1 && rowSecond[i] === rowSecond[i + 1]) {\r\n      rowSecond[i] *= 2;\r\n      rowSecond[i + 1] = 0;\r\n\r\n      score += rowSecond[i];\r\n\r\n      if (score > best) {\r\n        best = score;\r\n      }\r\n    }\r\n  });\r\n\r\n  rowSecond = filterZero(rowSecond);\r\n\r\n  while (rowSecond.length < columns) {\r\n    rowSecond.push(0);\r\n  }\r\n\r\n  return rowSecond;\r\n}\r\n\r\nfunction slideLeft() {\r\n  for (let r = 0; r < rows; r++) {\r\n    let row = board[r];\r\n\r\n    row = slide(row);\r\n\r\n    board[r] = row;\r\n\r\n    for (let c = 0; c < columns; c++) {\r\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n    }\r\n  }\r\n}\r\n\r\nfunction slideRight() {\r\n  for (let r = 0; r < rows; r++) {\r\n    let row = board[r];\r\n\r\n    row.reverse();\r\n\r\n    row = slide(row);\r\n\r\n    row.reverse();\r\n\r\n    board[r] = row;\r\n\r\n    for (let c = 0; c < columns; c++) {\r\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n    }\r\n  }\r\n}\r\n\r\nfunction slideUp() {\r\n  for (let c = 0; c < columns; c++) {\r\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\r\n\r\n    row = slide(row);\r\n    board[0][c] = row[0];\r\n    board[1][c] = row[1];\r\n    board[2][c] = row[2];\r\n    board[3][c] = row[3];\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n    }\r\n  }\r\n}\r\n\r\nfunction slideDown() {\r\n  for (let c = 0; c < columns; c++) {\r\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\r\n\r\n    row.reverse();\r\n\r\n    row = slide(row);\r\n\r\n    row.reverse();\r\n    board[0][c] = row[0];\r\n    board[1][c] = row[1];\r\n    board[2][c] = row[2];\r\n    board[3][c] = row[3];\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\r\n\r\n      const num = board[r][c];\r\n\r\n      updateTile(tile, num);\r\n    }\r\n  }\r\n}\r\n"]}